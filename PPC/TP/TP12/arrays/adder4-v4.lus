
node full_add(a, b, c : bool) returns (s, co : bool);
let
  s = (a xor b) xor c;
  co = if a then b or c else b and c;
tel;

node first_add4 (a0,a1,a2,a3: bool; b0,b1,b2,b3: bool)
returns (s0,s1,s2,s3:bool; carry: bool);
var c0,c1,c2,c3: bool;
let
  (s0,c0) = full_add(a0,b0,false);
  (s1,c1) = full_add(a1,b1,c0);
  (s2,c2) = full_add(a2,b2,c1);
  (s3,c3) = full_add(a3,b3,c2);
  carry = c3;
tel

node add4 (A, B: bool^4) returns (S: bool^4; carry: bool);
var C: bool^4;
let
  (S[0], C[0]) =  full_add(A[0], B[0], false);
  (S[1..3], C[1..3]) = full_add(A[1..3], B[1..3], C[0..2]);
  carry = C[3];
tel

